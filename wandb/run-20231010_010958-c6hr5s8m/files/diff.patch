diff --git a/models/nca/__pycache__/simulator.cpython-38.pyc b/models/nca/__pycache__/simulator.cpython-38.pyc
index a1de9eb..6b289a9 100644
Binary files a/models/nca/__pycache__/simulator.cpython-38.pyc and b/models/nca/__pycache__/simulator.cpython-38.pyc differ
diff --git a/models/nca/__pycache__/trainer_nca.cpython-38.pyc b/models/nca/__pycache__/trainer_nca.cpython-38.pyc
index 1a93ccf..cc973ed 100644
Binary files a/models/nca/__pycache__/trainer_nca.cpython-38.pyc and b/models/nca/__pycache__/trainer_nca.cpython-38.pyc differ
diff --git a/models/nca/substeps/__pycache__/utils.cpython-38.pyc b/models/nca/substeps/__pycache__/utils.cpython-38.pyc
index 2e3a1ef..de62c2f 100644
Binary files a/models/nca/substeps/__pycache__/utils.cpython-38.pyc and b/models/nca/substeps/__pycache__/utils.cpython-38.pyc differ
diff --git a/models/nca/substeps/utils.py b/models/nca/substeps/utils.py
index 7c5e3f0..8ab1b84 100644
--- a/models/nca/substeps/utils.py
+++ b/models/nca/substeps/utils.py
@@ -400,8 +400,10 @@ class AddAuxilaryChannel():
 
             code = hex(ord(emoji))[2:].lower()
             url = 'https://github.com/googlefonts/noto-emoji/blob/main/png/128/emoji_u%s.png?raw=true' % code
-            target = self.ops.imread(url, 48)
-            # target = self.ops.load_emoji(index=0)
+            try:
+                target = self.ops.imread(url, 48)
+            except:
+                target = self.ops.load_emoji(index=0)
             self.ops.imshow(target)
             target[:, :, :3] *= target[:, :, 3:]
 
diff --git a/models/nca/trainer_nca.py b/models/nca/trainer_nca.py
index c408424..dec8065 100644
--- a/models/nca/trainer_nca.py
+++ b/models/nca/trainer_nca.py
@@ -65,9 +65,10 @@ class TrainIsoNca:
         if self.hex_grid:
             self.xy_grid = self.ops.get_xy_grid(self.W)
         
-        self.target, self.aux_target = self.aux.get_targets()
+        
+        self.target, self.aux_target = self.aux.get_targets() #Can Define your own target here
         self.target_loss_f = InvariantLoss(
-            self.target, mirror=self.mirror, sharpen=True,hex_grid=self.hex_grid)
+            self.target, mirror=self.mirror, sharpen=True,hex_grid=self.hex_grid) #Can define your own loss function here
 
         self.opt = optim.Adam(self.runner.parameters(),
                                 lr=self.runner.config['simulation_metadata']['learning_params']['lr'],
diff --git a/models/nca/trainer_test.ipynb b/models/nca/trainer_test.ipynb
index f1facee..4284c15 100644
--- a/models/nca/trainer_test.ipynb
+++ b/models/nca/trainer_test.ipynb
@@ -2,9 +2,18 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 1,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/shashankkumar/anaconda3/envs/torch38/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:5: UserWarning: The torchvision.transforms.functional_tensor module is deprecated in 0.15 and will be **removed in 0.17**. Please don't rely on it. You probably just need to use APIs in torchvision.transforms.functional or in torchvision.transforms.v2.functional.\n",
+      "  warnings.warn(\n"
+     ]
+    }
+   ],
    "source": [
     "from trainer_nca import TrainIsoNca\n",
     "from simulator import NCARunner, configure_nca\n",
@@ -36,9 +45,37 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 2,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "resolvers already registered..\n",
+      "Skipping..  environment\n",
+      "Skipping:  objects\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/Users/shashankkumar/Documents/AgentTorch-original/AgentTorch/AgentTorch/helpers/environment.py:7: FutureWarning: adjacency_matrix will return a scipy.sparse array instead of a matrix in Networkx 3.0.\n",
+      "  A = torch.tensor(nx.adjacency_matrix(G).todense())\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Simulator done..\n",
+      "Simulator initialization done..\n",
+      "perc_n: 32 hidden_n: 192\n",
+      "initialization complete..\n"
+     ]
+    }
+   ],
    "source": [
     "config_file = \"/Users/shashankkumar/Documents/AgentTorch/models/nca/config.yaml\"\n",
     "\n",
